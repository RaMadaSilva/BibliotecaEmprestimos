// <auto-generated />
using System;
using BibliotecaEmprestimos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotecaEmprestimos.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR(80)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Autor", (string)null);
                });

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Emprestimo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataDevolucao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataDevolucao");

                    b.Property<DateTime>("DataEprestimo")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataEprestimo");

                    b.Property<int>("LeitorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeitorId");

                    b.ToTable("Emprestimo", (string)null);
                });

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Leitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR(80)")
                        .HasColumnName("Nome");

                    b.Property<int>("Telefone")
                        .HasMaxLength(9)
                        .HasColumnType("INT")
                        .HasColumnName("Telefone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Leitor_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Telefone" }, "IX_Leitor_Telefone")
                        .IsUnique();

                    b.ToTable("Leitor", (string)null);
                });

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnoEdicao")
                        .HasMaxLength(4)
                        .HasColumnType("INT")
                        .HasColumnName("AnoEdicao");

                    b.Property<int>("Genero")
                        .HasMaxLength(2)
                        .HasColumnType("INT")
                        .HasColumnName("Genero");

                    b.Property<int>("NumeroPag")
                        .HasMaxLength(5)
                        .HasColumnType("INT")
                        .HasColumnName("NumeroPag");

                    b.Property<double>("PrecoUnidade")
                        .HasColumnType("FLOAT")
                        .HasColumnName("PrecoUnidade");

                    b.Property<int>("QuandidadeDisponivel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(1)
                        .HasColumnName("QuandidadeDisponivel");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("NVARCHAR(300)")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Livro", (string)null);
                });

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmprestimoId")
                        .HasColumnType("int");

                    b.Property<double>("Montante")
                        .HasColumnType("FLOAT")
                        .HasColumnName("Montante");

                    b.HasKey("Id");

                    b.HasIndex("EmprestimoId")
                        .IsUnique();

                    b.ToTable("Pagamento", (string)null);
                });

            modelBuilder.Entity("LeitorLivro", b =>
                {
                    b.Property<int>("LeitorId")
                        .HasColumnType("int");

                    b.Property<int>("Livroid")
                        .HasColumnType("int");

                    b.HasKey("LeitorId", "Livroid");

                    b.HasIndex("Livroid");

                    b.ToTable("LeitorLivro");
                });

            modelBuilder.Entity("LivroAutor", b =>
                {
                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.HasKey("AutorId", "LivroId");

                    b.HasIndex("LivroId");

                    b.ToTable("LivroAutor");
                });

            modelBuilder.Entity("LivroEmprestimo", b =>
                {
                    b.Property<int>("EmprestimoId")
                        .HasColumnType("int");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.HasKey("EmprestimoId", "LivroId");

                    b.HasIndex("LivroId");

                    b.ToTable("LivroEmprestimo");
                });

            modelBuilder.Entity("PagamentoLivro", b =>
                {
                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<int>("PagamentoIs")
                        .HasColumnType("int");

                    b.HasKey("LivroId", "PagamentoIs");

                    b.HasIndex("PagamentoIs");

                    b.ToTable("PagamentoLivro");
                });

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Emprestimo", b =>
                {
                    b.HasOne("BibliotecaEmprestimos.Models.Leitor", "Leitor")
                        .WithMany("Emprestimos")
                        .HasForeignKey("LeitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emprestimo_LeitorId");

                    b.Navigation("Leitor");
                });

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Pagamento", b =>
                {
                    b.HasOne("BibliotecaEmprestimos.Models.Emprestimo", "Emprestimo")
                        .WithOne()
                        .HasForeignKey("BibliotecaEmprestimos.Models.Pagamento", "EmprestimoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Pagamento_Emprestimo_EmprestimoId");

                    b.Navigation("Emprestimo");
                });

            modelBuilder.Entity("LeitorLivro", b =>
                {
                    b.HasOne("BibliotecaEmprestimos.Models.Leitor", null)
                        .WithMany()
                        .HasForeignKey("LeitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Leitor_Livro_LeitorId");

                    b.HasOne("BibliotecaEmprestimos.Models.Livro", null)
                        .WithMany()
                        .HasForeignKey("Livroid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Leitor_Livro_LivroId");
                });

            modelBuilder.Entity("LivroAutor", b =>
                {
                    b.HasOne("BibliotecaEmprestimos.Models.Autor", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Autor_Livro_AutorId");

                    b.HasOne("BibliotecaEmprestimos.Models.Livro", null)
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Livro_Autor_LivroId");
                });

            modelBuilder.Entity("LivroEmprestimo", b =>
                {
                    b.HasOne("BibliotecaEmprestimos.Models.Emprestimo", null)
                        .WithMany()
                        .HasForeignKey("EmprestimoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emprestimo_Leitor_EmprestimoId");

                    b.HasOne("BibliotecaEmprestimos.Models.Livro", null)
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("LivroId");
                });

            modelBuilder.Entity("PagamentoLivro", b =>
                {
                    b.HasOne("BibliotecaEmprestimos.Models.Livro", null)
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Pagamento_Livro_LivroId");

                    b.HasOne("BibliotecaEmprestimos.Models.Pagamento", null)
                        .WithMany()
                        .HasForeignKey("PagamentoIs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Pagamento_Livro_PagamentoId");
                });

            modelBuilder.Entity("BibliotecaEmprestimos.Models.Leitor", b =>
                {
                    b.Navigation("Emprestimos");
                });
#pragma warning restore 612, 618
        }
    }
}
